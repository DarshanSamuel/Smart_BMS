import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType
import numpy as np

# Define file paths
input_cleaned_data_file = "cleaned_battery_dataset.csv"
onnx_model_output_file = "battery_charge_predictor.onnx"

print(f"Loading cleaned data from: {input_cleaned_data_file}")
try:
    df = pd.read_csv(input_cleaned_data_file)
    print("Data loaded successfully.")
except FileNotFoundError:
    print(f"Error: The file '{input_cleaned_data_file}' was not found. "
          "Please ensure it is in the same directory as this script and has been generated by the previous step.")
    exit()
except Exception as e:
    print(f"Error reading cleaned CSV: {e}")
    exit()

print("Original columns in loaded data:", df.columns.tolist())

# Separate features (X) and target (y)
# Ensure the feature columns match exactly what was defined in the cleaning step
feature_columns = [
    'Battery_Level',
    'Battery_Temperature',
    'Time_sin',
    'Time_cos',
    'Battery_Current_Feature'
]
target_column = 'Time_to_Next_Charge_Minutes'

# Check if all required columns are present
missing_features = [col for col in feature_columns if col not in df.columns]
if missing_features:
    print(f"Error: Missing feature columns in the loaded CSV: {missing_features}")
    print(f"Available columns are: {df.columns.tolist()}")
    exit()
if target_column not in df.columns:
    print(f"Error: Missing target column '{target_column}' in the loaded CSV.")
    print(f"Available columns are: {df.columns.tolist()}")
    exit()


X = df[feature_columns]
y = df[target_column]

print(f"Features (X) shape: {X.shape}")
print(f"Target (y) shape: {y.shape}")

# Split data into training and testing sets
# Using a fixed random_state for reproducibility
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"\nTraining data shape: {X_train.shape}")
print(f"Testing data shape: {X_test.shape}")

# Initialize and train the Random Forest Regressor model
# You can tune hyperparameters like n_estimators, max_depth, etc., for better performance
print("\nTraining Random Forest Regressor model...")
model = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1) # n_jobs=-1 uses all available cores
model.fit(X_train, y_train)
print("Model training complete.")

# Evaluate the model
print("\nEvaluating model performance...")
y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse) # Root Mean Squared Error
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae:.2f} minutes")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f} minutes")
print(f"R-squared (R2): {r2:.2f}")

# Export the trained model to ONNX format
print(f"\nExporting model to ONNX format: {onnx_model_output_file}")

# Corrected initial_type for RandomForestRegressor
# It expects a single input tensor of shape [batch_size, num_features]
initial_type = [('float_input', FloatTensorType([None, len(feature_columns)]))]


# Convert the scikit-learn model to ONNX
# For RandomForest, the target_opset is usually around 11 or 13 for broader compatibility
try:
    onx = convert_sklearn(model, initial_types=initial_type, target_opset=13)
    with open(onnx_model_output_file, "wb") as f:
        f.write(onx.SerializeToString())
    print("Model successfully exported to ONNX.")
    print(f"ONNX model saved as: {onnx_model_output_file}")
except Exception as e:
    print(f"Error exporting model to ONNX: {e}")

print("\nMachine Learning Model Training and Export Script Completed.")